/**
 * Copyright 2017 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/local/spectrumscale/connectors"
	"github.com/IBM/ubiquity/resources"
)

type FakeSpectrumScaleConnector struct {
	GetClusterIdStub        func() (string, error)
	getClusterIdMutex       sync.RWMutex
	getClusterIdArgsForCall []struct{}
	getClusterIdReturns     struct {
		result1 string
		result2 error
	}
	getClusterIdReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IsFilesystemMountedStub        func(filesystemName string) (bool, error)
	isFilesystemMountedMutex       sync.RWMutex
	isFilesystemMountedArgsForCall []struct {
		filesystemName string
	}
	isFilesystemMountedReturns struct {
		result1 bool
		result2 error
	}
	isFilesystemMountedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ListFilesystemsStub        func() ([]string, error)
	listFilesystemsMutex       sync.RWMutex
	listFilesystemsArgsForCall []struct{}
	listFilesystemsReturns     struct {
		result1 []string
		result2 error
	}
	listFilesystemsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetFilesystemMountpointStub        func(filesystemName string) (string, error)
	getFilesystemMountpointMutex       sync.RWMutex
	getFilesystemMountpointArgsForCall []struct {
		filesystemName string
	}
	getFilesystemMountpointReturns struct {
		result1 string
		result2 error
	}
	getFilesystemMountpointReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateFilesetStub        func(filesystemName string, filesetName string, opts map[string]interface{}) error
	createFilesetMutex       sync.RWMutex
	createFilesetArgsForCall []struct {
		filesystemName string
		filesetName    string
		opts           map[string]interface{}
	}
	createFilesetReturns struct {
		result1 error
	}
	createFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteFilesetStub        func(filesystemName string, filesetName string) error
	deleteFilesetMutex       sync.RWMutex
	deleteFilesetArgsForCall []struct {
		filesystemName string
		filesetName    string
	}
	deleteFilesetReturns struct {
		result1 error
	}
	deleteFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	LinkFilesetStub        func(filesystemName string, filesetName string) error
	linkFilesetMutex       sync.RWMutex
	linkFilesetArgsForCall []struct {
		filesystemName string
		filesetName    string
	}
	linkFilesetReturns struct {
		result1 error
	}
	linkFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	UnlinkFilesetStub        func(filesystemName string, filesetName string) error
	unlinkFilesetMutex       sync.RWMutex
	unlinkFilesetArgsForCall []struct {
		filesystemName string
		filesetName    string
	}
	unlinkFilesetReturns struct {
		result1 error
	}
	unlinkFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	ListFilesetsStub        func(filesystemName string) ([]resources.Volume, error)
	listFilesetsMutex       sync.RWMutex
	listFilesetsArgsForCall []struct {
		filesystemName string
	}
	listFilesetsReturns struct {
		result1 []resources.Volume
		result2 error
	}
	listFilesetsReturnsOnCall map[int]struct {
		result1 []resources.Volume
		result2 error
	}
	ListFilesetStub        func(filesystemName string, filesetName string) (resources.Volume, error)
	listFilesetMutex       sync.RWMutex
	listFilesetArgsForCall []struct {
		filesystemName string
		filesetName    string
	}
	listFilesetReturns struct {
		result1 resources.Volume
		result2 error
	}
	listFilesetReturnsOnCall map[int]struct {
		result1 resources.Volume
		result2 error
	}
	IsFilesetLinkedStub        func(filesystemName string, filesetName string) (bool, error)
	isFilesetLinkedMutex       sync.RWMutex
	isFilesetLinkedArgsForCall []struct {
		filesystemName string
		filesetName    string
	}
	isFilesetLinkedReturns struct {
		result1 bool
		result2 error
	}
	isFilesetLinkedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}

    CheckIfFSQuotaEnabledStub        func(filesystemName string) (error)
    checkIfFSQuotaEnabledMutex       sync.RWMutex
    checkIfFSQuotaEnabledArgsForCall []struct {
        filesystemName string
    }
    checkIfFSQuotaEnabledReturns struct {
        result1 error
    }
    checkIfFSQuotaEnabledReturnsOnCall map[int]struct {
        result1 error
    }

    ListFilesetQuotaStub        func(filesystemName string, filesetName string) (string, error)
    listFilesetQuotaMutex       sync.RWMutex
    listFilesetQuotaArgsForCall []struct {
        filesystemName string
        filesetName    string
    }
    listFilesetQuotaReturns struct {
        result1 string
        result2 error
    }
    listFilesetQuotaReturnsOnCall map[int]struct {
        result1 string
        result2 error
    }

	SetFilesetQuotaStub        func(filesystemName string, filesetName string, quota string) error
	setFilesetQuotaMutex       sync.RWMutex
	setFilesetQuotaArgsForCall []struct {
		filesystemName string
		filesetName    string
		quota          string
	}
	setFilesetQuotaReturns struct {
		result1 error
	}
	setFilesetQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	ExportNfsStub        func(volumeMountpoint string, clientConfig string) error
	exportNfsMutex       sync.RWMutex
	exportNfsArgsForCall []struct {
		volumeMountpoint string
		clientConfig     string
	}
	exportNfsReturns struct {
		result1 error
	}
	exportNfsReturnsOnCall map[int]struct {
		result1 error
	}
	UnexportNfsStub        func(volumeMountpoint string) error
	unexportNfsMutex       sync.RWMutex
	unexportNfsArgsForCall []struct {
		volumeMountpoint string
	}
	unexportNfsReturns struct {
		result1 error
	}
	unexportNfsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpectrumScaleConnector) GetClusterId() (string, error) {
	fake.getClusterIdMutex.Lock()
	ret, specificReturn := fake.getClusterIdReturnsOnCall[len(fake.getClusterIdArgsForCall)]
	fake.getClusterIdArgsForCall = append(fake.getClusterIdArgsForCall, struct{}{})
	fake.recordInvocation("GetClusterId", []interface{}{})
	fake.getClusterIdMutex.Unlock()
	if fake.GetClusterIdStub != nil {
		return fake.GetClusterIdStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getClusterIdReturns.result1, fake.getClusterIdReturns.result2
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdCallCount() int {
	fake.getClusterIdMutex.RLock()
	defer fake.getClusterIdMutex.RUnlock()
	return len(fake.getClusterIdArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdReturns(result1 string, result2 error) {
	fake.GetClusterIdStub = nil
	fake.getClusterIdReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetClusterIdStub = nil
	if fake.getClusterIdReturnsOnCall == nil {
		fake.getClusterIdReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getClusterIdReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMounted(filesystemName string) (bool, error) {
	fake.isFilesystemMountedMutex.Lock()
	ret, specificReturn := fake.isFilesystemMountedReturnsOnCall[len(fake.isFilesystemMountedArgsForCall)]
	fake.isFilesystemMountedArgsForCall = append(fake.isFilesystemMountedArgsForCall, struct {
		filesystemName string
	}{filesystemName})
	fake.recordInvocation("IsFilesystemMounted", []interface{}{filesystemName})
	fake.isFilesystemMountedMutex.Unlock()
	if fake.IsFilesystemMountedStub != nil {
		return fake.IsFilesystemMountedStub(filesystemName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isFilesystemMountedReturns.result1, fake.isFilesystemMountedReturns.result2
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedCallCount() int {
	fake.isFilesystemMountedMutex.RLock()
	defer fake.isFilesystemMountedMutex.RUnlock()
	return len(fake.isFilesystemMountedArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedArgsForCall(i int) string {
	fake.isFilesystemMountedMutex.RLock()
	defer fake.isFilesystemMountedMutex.RUnlock()
	return fake.isFilesystemMountedArgsForCall[i].filesystemName
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedReturns(result1 bool, result2 error) {
	fake.IsFilesystemMountedStub = nil
	fake.isFilesystemMountedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsFilesystemMountedStub = nil
	if fake.isFilesystemMountedReturnsOnCall == nil {
		fake.isFilesystemMountedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFilesystemMountedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesystems() ([]string, error) {
	fake.listFilesystemsMutex.Lock()
	ret, specificReturn := fake.listFilesystemsReturnsOnCall[len(fake.listFilesystemsArgsForCall)]
	fake.listFilesystemsArgsForCall = append(fake.listFilesystemsArgsForCall, struct{}{})
	fake.recordInvocation("ListFilesystems", []interface{}{})
	fake.listFilesystemsMutex.Unlock()
	if fake.ListFilesystemsStub != nil {
		return fake.ListFilesystemsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listFilesystemsReturns.result1, fake.listFilesystemsReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsCallCount() int {
	fake.listFilesystemsMutex.RLock()
	defer fake.listFilesystemsMutex.RUnlock()
	return len(fake.listFilesystemsArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsReturns(result1 []string, result2 error) {
	fake.ListFilesystemsStub = nil
	fake.listFilesystemsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ListFilesystemsStub = nil
	if fake.listFilesystemsReturnsOnCall == nil {
		fake.listFilesystemsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listFilesystemsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpoint(filesystemName string) (string, error) {
	fake.getFilesystemMountpointMutex.Lock()
	ret, specificReturn := fake.getFilesystemMountpointReturnsOnCall[len(fake.getFilesystemMountpointArgsForCall)]
	fake.getFilesystemMountpointArgsForCall = append(fake.getFilesystemMountpointArgsForCall, struct {
		filesystemName string
	}{filesystemName})
	fake.recordInvocation("GetFilesystemMountpoint", []interface{}{filesystemName})
	fake.getFilesystemMountpointMutex.Unlock()
	if fake.GetFilesystemMountpointStub != nil {
		return fake.GetFilesystemMountpointStub(filesystemName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getFilesystemMountpointReturns.result1, fake.getFilesystemMountpointReturns.result2
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointCallCount() int {
	fake.getFilesystemMountpointMutex.RLock()
	defer fake.getFilesystemMountpointMutex.RUnlock()
	return len(fake.getFilesystemMountpointArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointArgsForCall(i int) string {
	fake.getFilesystemMountpointMutex.RLock()
	defer fake.getFilesystemMountpointMutex.RUnlock()
	return fake.getFilesystemMountpointArgsForCall[i].filesystemName
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointReturns(result1 string, result2 error) {
	fake.GetFilesystemMountpointStub = nil
	fake.getFilesystemMountpointReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetFilesystemMountpointStub = nil
	if fake.getFilesystemMountpointReturnsOnCall == nil {
		fake.getFilesystemMountpointReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getFilesystemMountpointReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) CreateFileset(filesystemName string, filesetName string, opts map[string]interface{}) error {
	fake.createFilesetMutex.Lock()
	ret, specificReturn := fake.createFilesetReturnsOnCall[len(fake.createFilesetArgsForCall)]
	fake.createFilesetArgsForCall = append(fake.createFilesetArgsForCall, struct {
		filesystemName string
		filesetName    string
		opts           map[string]interface{}
	}{filesystemName, filesetName, opts})
	fake.recordInvocation("CreateFileset", []interface{}{filesystemName, filesetName, opts})
	fake.createFilesetMutex.Unlock()
	if fake.CreateFilesetStub != nil {
		return fake.CreateFilesetStub(filesystemName, filesetName, opts)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createFilesetReturns.result1
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetCallCount() int {
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	return len(fake.createFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetArgsForCall(i int) (string, string, map[string]interface{}) {
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	return fake.createFilesetArgsForCall[i].filesystemName, fake.createFilesetArgsForCall[i].filesetName, fake.createFilesetArgsForCall[i].opts
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetReturns(result1 error) {
	fake.CreateFilesetStub = nil
	fake.createFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetReturnsOnCall(i int, result1 error) {
	fake.CreateFilesetStub = nil
	if fake.createFilesetReturnsOnCall == nil {
		fake.createFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) DeleteFileset(filesystemName string, filesetName string) error {
	fake.deleteFilesetMutex.Lock()
	ret, specificReturn := fake.deleteFilesetReturnsOnCall[len(fake.deleteFilesetArgsForCall)]
	fake.deleteFilesetArgsForCall = append(fake.deleteFilesetArgsForCall, struct {
		filesystemName string
		filesetName    string
	}{filesystemName, filesetName})
	fake.recordInvocation("DeleteFileset", []interface{}{filesystemName, filesetName})
	fake.deleteFilesetMutex.Unlock()
	if fake.DeleteFilesetStub != nil {
		return fake.DeleteFilesetStub(filesystemName, filesetName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteFilesetReturns.result1
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetCallCount() int {
	fake.deleteFilesetMutex.RLock()
	defer fake.deleteFilesetMutex.RUnlock()
	return len(fake.deleteFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetArgsForCall(i int) (string, string) {
	fake.deleteFilesetMutex.RLock()
	defer fake.deleteFilesetMutex.RUnlock()
	return fake.deleteFilesetArgsForCall[i].filesystemName, fake.deleteFilesetArgsForCall[i].filesetName
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetReturns(result1 error) {
	fake.DeleteFilesetStub = nil
	fake.deleteFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetReturnsOnCall(i int, result1 error) {
	fake.DeleteFilesetStub = nil
	if fake.deleteFilesetReturnsOnCall == nil {
		fake.deleteFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) LinkFileset(filesystemName string, filesetName string) error {
	fake.linkFilesetMutex.Lock()
	ret, specificReturn := fake.linkFilesetReturnsOnCall[len(fake.linkFilesetArgsForCall)]
	fake.linkFilesetArgsForCall = append(fake.linkFilesetArgsForCall, struct {
		filesystemName string
		filesetName    string
	}{filesystemName, filesetName})
	fake.recordInvocation("LinkFileset", []interface{}{filesystemName, filesetName})
	fake.linkFilesetMutex.Unlock()
	if fake.LinkFilesetStub != nil {
		return fake.LinkFilesetStub(filesystemName, filesetName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.linkFilesetReturns.result1
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetCallCount() int {
	fake.linkFilesetMutex.RLock()
	defer fake.linkFilesetMutex.RUnlock()
	return len(fake.linkFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetArgsForCall(i int) (string, string) {
	fake.linkFilesetMutex.RLock()
	defer fake.linkFilesetMutex.RUnlock()
	return fake.linkFilesetArgsForCall[i].filesystemName, fake.linkFilesetArgsForCall[i].filesetName
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetReturns(result1 error) {
	fake.LinkFilesetStub = nil
	fake.linkFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetReturnsOnCall(i int, result1 error) {
	fake.LinkFilesetStub = nil
	if fake.linkFilesetReturnsOnCall == nil {
		fake.linkFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.linkFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) UnlinkFileset(filesystemName string, filesetName string) error {
	fake.unlinkFilesetMutex.Lock()
	ret, specificReturn := fake.unlinkFilesetReturnsOnCall[len(fake.unlinkFilesetArgsForCall)]
	fake.unlinkFilesetArgsForCall = append(fake.unlinkFilesetArgsForCall, struct {
		filesystemName string
		filesetName    string
	}{filesystemName, filesetName})
	fake.recordInvocation("UnlinkFileset", []interface{}{filesystemName, filesetName})
	fake.unlinkFilesetMutex.Unlock()
	if fake.UnlinkFilesetStub != nil {
		return fake.UnlinkFilesetStub(filesystemName, filesetName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unlinkFilesetReturns.result1
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetCallCount() int {
	fake.unlinkFilesetMutex.RLock()
	defer fake.unlinkFilesetMutex.RUnlock()
	return len(fake.unlinkFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetArgsForCall(i int) (string, string) {
	fake.unlinkFilesetMutex.RLock()
	defer fake.unlinkFilesetMutex.RUnlock()
	return fake.unlinkFilesetArgsForCall[i].filesystemName, fake.unlinkFilesetArgsForCall[i].filesetName
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetReturns(result1 error) {
	fake.UnlinkFilesetStub = nil
	fake.unlinkFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetReturnsOnCall(i int, result1 error) {
	fake.UnlinkFilesetStub = nil
	if fake.unlinkFilesetReturnsOnCall == nil {
		fake.unlinkFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unlinkFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) ListFilesets(filesystemName string) ([]resources.Volume, error) {
	fake.listFilesetsMutex.Lock()
	ret, specificReturn := fake.listFilesetsReturnsOnCall[len(fake.listFilesetsArgsForCall)]
	fake.listFilesetsArgsForCall = append(fake.listFilesetsArgsForCall, struct {
		filesystemName string
	}{filesystemName})
	fake.recordInvocation("ListFilesets", []interface{}{filesystemName})
	fake.listFilesetsMutex.Unlock()
	if fake.ListFilesetsStub != nil {
		return fake.ListFilesetsStub(filesystemName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listFilesetsReturns.result1, fake.listFilesetsReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsCallCount() int {
	fake.listFilesetsMutex.RLock()
	defer fake.listFilesetsMutex.RUnlock()
	return len(fake.listFilesetsArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsArgsForCall(i int) string {
	fake.listFilesetsMutex.RLock()
	defer fake.listFilesetsMutex.RUnlock()
	return fake.listFilesetsArgsForCall[i].filesystemName
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsReturns(result1 []resources.Volume, result2 error) {
	fake.ListFilesetsStub = nil
	fake.listFilesetsReturns = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsReturnsOnCall(i int, result1 []resources.Volume, result2 error) {
	fake.ListFilesetsStub = nil
	if fake.listFilesetsReturnsOnCall == nil {
		fake.listFilesetsReturnsOnCall = make(map[int]struct {
			result1 []resources.Volume
			result2 error
		})
	}
	fake.listFilesetsReturnsOnCall[i] = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFileset(filesystemName string, filesetName string) (resources.Volume, error) {
	fake.listFilesetMutex.Lock()
	ret, specificReturn := fake.listFilesetReturnsOnCall[len(fake.listFilesetArgsForCall)]
	fake.listFilesetArgsForCall = append(fake.listFilesetArgsForCall, struct {
		filesystemName string
		filesetName    string
	}{filesystemName, filesetName})
	fake.recordInvocation("ListFileset", []interface{}{filesystemName, filesetName})
	fake.listFilesetMutex.Unlock()
	if fake.ListFilesetStub != nil {
		return fake.ListFilesetStub(filesystemName, filesetName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listFilesetReturns.result1, fake.listFilesetReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetCallCount() int {
	fake.listFilesetMutex.RLock()
	defer fake.listFilesetMutex.RUnlock()
	return len(fake.listFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesetArgsForCall(i int) (string, string) {
	fake.listFilesetMutex.RLock()
	defer fake.listFilesetMutex.RUnlock()
	return fake.listFilesetArgsForCall[i].filesystemName, fake.listFilesetArgsForCall[i].filesetName
}

func (fake *FakeSpectrumScaleConnector) ListFilesetReturns(result1 resources.Volume, result2 error) {
	fake.ListFilesetStub = nil
	fake.listFilesetReturns = struct {
		result1 resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetReturnsOnCall(i int, result1 resources.Volume, result2 error) {
	fake.ListFilesetStub = nil
	if fake.listFilesetReturnsOnCall == nil {
		fake.listFilesetReturnsOnCall = make(map[int]struct {
			result1 resources.Volume
			result2 error
		})
	}
	fake.listFilesetReturnsOnCall[i] = struct {
		result1 resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinked(filesystemName string, filesetName string) (bool, error) {
	fake.isFilesetLinkedMutex.Lock()
	ret, specificReturn := fake.isFilesetLinkedReturnsOnCall[len(fake.isFilesetLinkedArgsForCall)]
	fake.isFilesetLinkedArgsForCall = append(fake.isFilesetLinkedArgsForCall, struct {
		filesystemName string
		filesetName    string
	}{filesystemName, filesetName})
	fake.recordInvocation("IsFilesetLinked", []interface{}{filesystemName, filesetName})
	fake.isFilesetLinkedMutex.Unlock()
	if fake.IsFilesetLinkedStub != nil {
		return fake.IsFilesetLinkedStub(filesystemName, filesetName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isFilesetLinkedReturns.result1, fake.isFilesetLinkedReturns.result2
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedCallCount() int {
	fake.isFilesetLinkedMutex.RLock()
	defer fake.isFilesetLinkedMutex.RUnlock()
	return len(fake.isFilesetLinkedArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedArgsForCall(i int) (string, string) {
	fake.isFilesetLinkedMutex.RLock()
	defer fake.isFilesetLinkedMutex.RUnlock()
	return fake.isFilesetLinkedArgsForCall[i].filesystemName, fake.isFilesetLinkedArgsForCall[i].filesetName
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedReturns(result1 bool, result2 error) {
	fake.IsFilesetLinkedStub = nil
	fake.isFilesetLinkedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsFilesetLinkedStub = nil
	if fake.isFilesetLinkedReturnsOnCall == nil {
		fake.isFilesetLinkedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFilesetLinkedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabled(filesystemName string) (error) {
	fake.checkIfFSQuotaEnabledMutex.Lock()
	ret, specificReturn := fake.checkIfFSQuotaEnabledReturnsOnCall[len(fake.checkIfFSQuotaEnabledArgsForCall)]
	fake.checkIfFSQuotaEnabledArgsForCall = append(fake.checkIfFSQuotaEnabledArgsForCall, struct {
		filesystemName string
	}{filesystemName})
	fake.recordInvocation("CheckIfFSQuotaEnabled", []interface{}{filesystemName})
	fake.checkIfFSQuotaEnabledMutex.Unlock()
	if fake.CheckIfFSQuotaEnabledStub != nil {
		return fake.CheckIfFSQuotaEnabledStub(filesystemName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.checkIfFSQuotaEnabledReturns.result1
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledCallCount() int {
	fake.checkIfFSQuotaEnabledMutex.RLock()
	defer fake.checkIfFSQuotaEnabledMutex.RUnlock()
	return len(fake.checkIfFSQuotaEnabledArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledArgsForCall(i int) (string) {
	fake.checkIfFSQuotaEnabledMutex.RLock()
	defer fake.checkIfFSQuotaEnabledMutex.RUnlock()
	return fake.checkIfFSQuotaEnabledArgsForCall[i].filesystemName
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledReturns(result1 error) {
	fake.CheckIfFSQuotaEnabledStub = nil
	fake.checkIfFSQuotaEnabledReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledReturnsOnCall(i int, result1 error) {
	fake.CheckIfFSQuotaEnabledStub = nil
	if fake.checkIfFSQuotaEnabledReturnsOnCall == nil {
		fake.checkIfFSQuotaEnabledReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkIfFSQuotaEnabledReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}


func (fake *FakeSpectrumScaleConnector) ListFilesetQuota(filesystemName string, filesetName string) (string, error) {
    fake.listFilesetQuotaMutex.Lock()
    ret, specificReturn := fake.listFilesetQuotaReturnsOnCall[len(fake.listFilesetQuotaArgsForCall)]
    fake.listFilesetQuotaArgsForCall = append(fake.listFilesetQuotaArgsForCall, struct {
        filesystemName string
        filesetName    string
    }{filesystemName, filesetName})
    fake.recordInvocation("ListFilesetQuota", []interface{}{filesystemName, filesetName})
    fake.listFilesetQuotaMutex.Unlock()
    if fake.ListFilesetQuotaStub != nil {
        return fake.ListFilesetQuotaStub(filesystemName, filesetName)
    }
    if specificReturn {
        return ret.result1, ret.result2
    }
    return fake.listFilesetQuotaReturns.result1, fake.listFilesetQuotaReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaCallCount() int {
    fake.listFilesetQuotaMutex.RLock()
    defer fake.listFilesetQuotaMutex.RUnlock()
    return len(fake.listFilesetQuotaArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaArgsForCall(i int) (string, string) {
    fake.listFilesetQuotaMutex.RLock()
    defer fake.listFilesetQuotaMutex.RUnlock()
    return fake.listFilesetQuotaArgsForCall[i].filesystemName, fake.listFilesetQuotaArgsForCall[i].filesetName
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaReturns(result1 string, result2 error) {
    fake.ListFilesetQuotaStub = nil
    fake.listFilesetQuotaReturns = struct {
        result1 string
        result2 error
    }{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaReturnsOnCall(i int, result1 string, result2 error) {
    fake.ListFilesetQuotaStub = nil
    if fake.listFilesetQuotaReturnsOnCall == nil {
        fake.listFilesetQuotaReturnsOnCall = make(map[int]struct {
            result1 string
            result2 error
        })
    }
    fake.listFilesetQuotaReturnsOnCall[i] = struct {
        result1 string
        result2 error
    }{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuota(filesystemName string, filesetName string, quota string) error {
	fake.setFilesetQuotaMutex.Lock()
	ret, specificReturn := fake.setFilesetQuotaReturnsOnCall[len(fake.setFilesetQuotaArgsForCall)]
	fake.setFilesetQuotaArgsForCall = append(fake.setFilesetQuotaArgsForCall, struct {
		filesystemName string
		filesetName    string
		quota          string
	}{filesystemName, filesetName, quota})
	fake.recordInvocation("SetFilesetQuota", []interface{}{filesystemName, filesetName, quota})
	fake.setFilesetQuotaMutex.Unlock()
	if fake.SetFilesetQuotaStub != nil {
		return fake.SetFilesetQuotaStub(filesystemName, filesetName, quota)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setFilesetQuotaReturns.result1
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaCallCount() int {
	fake.setFilesetQuotaMutex.RLock()
	defer fake.setFilesetQuotaMutex.RUnlock()
	return len(fake.setFilesetQuotaArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaArgsForCall(i int) (string, string, string) {
	fake.setFilesetQuotaMutex.RLock()
	defer fake.setFilesetQuotaMutex.RUnlock()
	return fake.setFilesetQuotaArgsForCall[i].filesystemName, fake.setFilesetQuotaArgsForCall[i].filesetName, fake.setFilesetQuotaArgsForCall[i].quota
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaReturns(result1 error) {
	fake.SetFilesetQuotaStub = nil
	fake.setFilesetQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaReturnsOnCall(i int, result1 error) {
	fake.SetFilesetQuotaStub = nil
	if fake.setFilesetQuotaReturnsOnCall == nil {
		fake.setFilesetQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setFilesetQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) ExportNfs(volumeMountpoint string, clientConfig string) error {
	fake.exportNfsMutex.Lock()
	ret, specificReturn := fake.exportNfsReturnsOnCall[len(fake.exportNfsArgsForCall)]
	fake.exportNfsArgsForCall = append(fake.exportNfsArgsForCall, struct {
		volumeMountpoint string
		clientConfig     string
	}{volumeMountpoint, clientConfig})
	fake.recordInvocation("ExportNfs", []interface{}{volumeMountpoint, clientConfig})
	fake.exportNfsMutex.Unlock()
	if fake.ExportNfsStub != nil {
		return fake.ExportNfsStub(volumeMountpoint, clientConfig)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.exportNfsReturns.result1
}

func (fake *FakeSpectrumScaleConnector) ExportNfsCallCount() int {
	fake.exportNfsMutex.RLock()
	defer fake.exportNfsMutex.RUnlock()
	return len(fake.exportNfsArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ExportNfsArgsForCall(i int) (string, string) {
	fake.exportNfsMutex.RLock()
	defer fake.exportNfsMutex.RUnlock()
	return fake.exportNfsArgsForCall[i].volumeMountpoint, fake.exportNfsArgsForCall[i].clientConfig
}

func (fake *FakeSpectrumScaleConnector) ExportNfsReturns(result1 error) {
	fake.ExportNfsStub = nil
	fake.exportNfsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) ExportNfsReturnsOnCall(i int, result1 error) {
	fake.ExportNfsStub = nil
	if fake.exportNfsReturnsOnCall == nil {
		fake.exportNfsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportNfsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) UnexportNfs(volumeMountpoint string) error {
	fake.unexportNfsMutex.Lock()
	ret, specificReturn := fake.unexportNfsReturnsOnCall[len(fake.unexportNfsArgsForCall)]
	fake.unexportNfsArgsForCall = append(fake.unexportNfsArgsForCall, struct {
		volumeMountpoint string
	}{volumeMountpoint})
	fake.recordInvocation("UnexportNfs", []interface{}{volumeMountpoint})
	fake.unexportNfsMutex.Unlock()
	if fake.UnexportNfsStub != nil {
		return fake.UnexportNfsStub(volumeMountpoint)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unexportNfsReturns.result1
}

func (fake *FakeSpectrumScaleConnector) UnexportNfsCallCount() int {
	fake.unexportNfsMutex.RLock()
	defer fake.unexportNfsMutex.RUnlock()
	return len(fake.unexportNfsArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) UnexportNfsArgsForCall(i int) string {
	fake.unexportNfsMutex.RLock()
	defer fake.unexportNfsMutex.RUnlock()
	return fake.unexportNfsArgsForCall[i].volumeMountpoint
}

func (fake *FakeSpectrumScaleConnector) UnexportNfsReturns(result1 error) {
	fake.UnexportNfsStub = nil
	fake.unexportNfsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) UnexportNfsReturnsOnCall(i int, result1 error) {
	fake.UnexportNfsStub = nil
	if fake.unexportNfsReturnsOnCall == nil {
		fake.unexportNfsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unexportNfsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getClusterIdMutex.RLock()
	defer fake.getClusterIdMutex.RUnlock()
	fake.isFilesystemMountedMutex.RLock()
	defer fake.isFilesystemMountedMutex.RUnlock()
	fake.listFilesystemsMutex.RLock()
	defer fake.listFilesystemsMutex.RUnlock()
	fake.getFilesystemMountpointMutex.RLock()
	defer fake.getFilesystemMountpointMutex.RUnlock()
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	fake.deleteFilesetMutex.RLock()
	defer fake.deleteFilesetMutex.RUnlock()
	fake.linkFilesetMutex.RLock()
	defer fake.linkFilesetMutex.RUnlock()
	fake.unlinkFilesetMutex.RLock()
	defer fake.unlinkFilesetMutex.RUnlock()
	fake.listFilesetsMutex.RLock()
	defer fake.listFilesetsMutex.RUnlock()
	fake.listFilesetMutex.RLock()
	defer fake.listFilesetMutex.RUnlock()
	fake.isFilesetLinkedMutex.RLock()
	defer fake.isFilesetLinkedMutex.RUnlock()
	fake.listFilesetQuotaMutex.RLock()
	defer fake.listFilesetQuotaMutex.RUnlock()
	fake.setFilesetQuotaMutex.RLock()
	defer fake.setFilesetQuotaMutex.RUnlock()
	fake.checkIfFSQuotaEnabledMutex.RLock()
	defer fake.checkIfFSQuotaEnabledMutex.RUnlock()
	fake.exportNfsMutex.RLock()
	defer fake.exportNfsMutex.RUnlock()
	fake.unexportNfsMutex.RLock()
	defer fake.unexportNfsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSpectrumScaleConnector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ connectors.SpectrumScaleConnector = new(FakeSpectrumScaleConnector)
