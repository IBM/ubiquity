/**
 * Copyright 2017 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/local/spectrumscale"
	"github.com/IBM/ubiquity/resources"
)

type FakeSpectrumDataModelWrapper struct {
	GetDbNameStub        func() string
	getDbNameMutex       sync.RWMutex
	getDbNameArgsForCall []struct{}
	getDbNameReturns     struct {
		result1 string
	}
	getDbNameReturnsOnCall map[int]struct {
		result1 string
	}


	IsDbVolumeStub        func(name string) bool
	isDbVolumeMutex       sync.RWMutex
	isDbVolumeArgsForCall []struct{name string}
	isDbVolumeReturns     struct {
		result1 bool
	}

	isDbVolumeReturnsOnCall map[int]struct {
		result1 bool
	}

	DeleteVolumeStub        func(name string) error
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		name string
	}
	deleteVolumeReturns struct {
		result1 error
	}
	deleteVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	InsertFilesetVolumeStub        func(fileset, volumeName string, filesystem string, isPreexisting bool, opts map[string]interface{}) error
	insertFilesetVolumeMutex       sync.RWMutex
	insertFilesetVolumeArgsForCall []struct {
		fileset       string
		volumeName    string
		filesystem    string
		isPreexisting bool
		opts          map[string]interface{}
	}
	insertFilesetVolumeReturns struct {
		result1 error
	}
	insertFilesetVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	InsertFilesetQuotaVolumeStub        func(fileset, quota, volumeName string, filesystem string, isPreexisting bool, opts map[string]interface{}) error
	insertFilesetQuotaVolumeMutex       sync.RWMutex
	insertFilesetQuotaVolumeArgsForCall []struct {
		fileset       string
		quota         string
		volumeName    string
		filesystem    string
		isPreexisting bool
		opts          map[string]interface{}
	}
	insertFilesetQuotaVolumeReturns struct {
		result1 error
	}
	insertFilesetQuotaVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	GetVolumeStub        func(name string) (spectrumscale.SpectrumScaleVolume, bool, error)
	getVolumeMutex       sync.RWMutex
	getVolumeArgsForCall []struct {
		name string
	}
	getVolumeReturns struct {
		result1 spectrumscale.SpectrumScaleVolume
		result2 bool
		result3 error
	}
	getVolumeReturnsOnCall map[int]struct {
		result1 spectrumscale.SpectrumScaleVolume
		result2 bool
		result3 error
	}
	ListVolumesStub        func() ([]resources.Volume, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct{}
	listVolumesReturns     struct {
		result1 []resources.Volume
		result2 error
	}
	listVolumesReturnsOnCall map[int]struct {
		result1 []resources.Volume
		result2 error
	}
    UpdateDatabaseVolumeStub        func(newVolume *spectrumscale.SpectrumScaleVolume)
    updateDatabaseVolumeMutex       sync.RWMutex
    updateDatabaseVolumeArgsForCall []struct {
        newVolume *spectrumscale.SpectrumScaleVolume
    }



	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpectrumDataModelWrapper) GetDbName() string {
	fake.getDbNameMutex.Lock()
	ret, specificReturn := fake.getDbNameReturnsOnCall[len(fake.getDbNameArgsForCall)]
	fake.getDbNameArgsForCall = append(fake.getDbNameArgsForCall, struct{}{})
	fake.recordInvocation("GetDbName", []interface{}{})
	fake.getDbNameMutex.Unlock()
	if fake.GetDbNameStub != nil {
		return fake.GetDbNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getDbNameReturns.result1
}

func (fake *FakeSpectrumDataModelWrapper) GetDbNameCallCount() int {
	fake.getDbNameMutex.RLock()
	defer fake.getDbNameMutex.RUnlock()
	return len(fake.getDbNameArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) GetDbNameReturns(result1 string) {
	fake.GetDbNameStub = nil
	fake.getDbNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) GetDbNameReturnsOnCall(i int, result1 string) {
	fake.GetDbNameStub = nil
	if fake.getDbNameReturnsOnCall == nil {
		fake.getDbNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDbNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}


func (fake *FakeSpectrumDataModelWrapper) IsDbVolume(name string) bool {
	fake.isDbVolumeMutex.Lock()
	ret, specificReturn := fake.isDbVolumeReturnsOnCall[len(fake.isDbVolumeArgsForCall)]
	fake.isDbVolumeArgsForCall = append(fake.isDbVolumeArgsForCall, struct{ 
		name string
	 }{name})



	fake.recordInvocation("IsDbVolume", []interface{}{})
	fake.isDbVolumeMutex.Unlock()
	if fake.IsDbVolumeStub != nil {
		return fake.IsDbVolumeStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isDbVolumeReturns.result1
}

func (fake *FakeSpectrumDataModelWrapper) IsDbVolumeCallCount() int {
	fake.isDbVolumeMutex.RLock()
	defer fake.isDbVolumeMutex.RUnlock()
	return len(fake.isDbVolumeArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) IsDbVolumeReturns(result1 bool) {
	fake.IsDbVolumeStub = nil
	fake.isDbVolumeReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) IsDbVolumeReturnsOnCall(i int, result1 bool) {
	fake.IsDbVolumeStub = nil
	if fake.isDbVolumeReturnsOnCall == nil {
		fake.isDbVolumeReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isDbVolumeReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) DeleteVolume(name string) error {
	fake.deleteVolumeMutex.Lock()
	ret, specificReturn := fake.deleteVolumeReturnsOnCall[len(fake.deleteVolumeArgsForCall)]
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("DeleteVolume", []interface{}{name})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteVolumeReturns.result1
}

func (fake *FakeSpectrumDataModelWrapper) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) DeleteVolumeArgsForCall(i int) string {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return fake.deleteVolumeArgsForCall[i].name
}

func (fake *FakeSpectrumDataModelWrapper) DeleteVolumeReturns(result1 error) {
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) DeleteVolumeReturnsOnCall(i int, result1 error) {
	fake.DeleteVolumeStub = nil
	if fake.deleteVolumeReturnsOnCall == nil {
		fake.deleteVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetVolume(fileset string, volumeName string, filesystem string, isPreexisting bool, opts map[string]interface{}) error {
	fake.insertFilesetVolumeMutex.Lock()
	ret, specificReturn := fake.insertFilesetVolumeReturnsOnCall[len(fake.insertFilesetVolumeArgsForCall)]
	fake.insertFilesetVolumeArgsForCall = append(fake.insertFilesetVolumeArgsForCall, struct {
		fileset       string
		volumeName    string
		filesystem    string
		isPreexisting bool
		opts          map[string]interface{}
	}{fileset, volumeName, filesystem, isPreexisting, opts})
	fake.recordInvocation("InsertFilesetVolume", []interface{}{fileset, volumeName, filesystem, isPreexisting, opts})
	fake.insertFilesetVolumeMutex.Unlock()
	if fake.InsertFilesetVolumeStub != nil {
		return fake.InsertFilesetVolumeStub(fileset, volumeName, filesystem, isPreexisting, opts)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.insertFilesetVolumeReturns.result1
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetVolumeCallCount() int {
	fake.insertFilesetVolumeMutex.RLock()
	defer fake.insertFilesetVolumeMutex.RUnlock()
	return len(fake.insertFilesetVolumeArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetVolumeArgsForCall(i int) (string, string, string, bool, map[string]interface{}) {
	fake.insertFilesetVolumeMutex.RLock()
	defer fake.insertFilesetVolumeMutex.RUnlock()
	return fake.insertFilesetVolumeArgsForCall[i].fileset, fake.insertFilesetVolumeArgsForCall[i].volumeName, fake.insertFilesetVolumeArgsForCall[i].filesystem, fake.insertFilesetVolumeArgsForCall[i].isPreexisting, fake.insertFilesetVolumeArgsForCall[i].opts
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetVolumeReturns(result1 error) {
	fake.InsertFilesetVolumeStub = nil
	fake.insertFilesetVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetVolumeReturnsOnCall(i int, result1 error) {
	fake.InsertFilesetVolumeStub = nil
	if fake.insertFilesetVolumeReturnsOnCall == nil {
		fake.insertFilesetVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertFilesetVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetQuotaVolume(fileset string, quota string, volumeName string, filesystem string, isPreexisting bool, opts map[string]interface{}) error {
	fake.insertFilesetQuotaVolumeMutex.Lock()
	ret, specificReturn := fake.insertFilesetQuotaVolumeReturnsOnCall[len(fake.insertFilesetQuotaVolumeArgsForCall)]
	fake.insertFilesetQuotaVolumeArgsForCall = append(fake.insertFilesetQuotaVolumeArgsForCall, struct {
		fileset       string
		quota         string
		volumeName    string
		filesystem    string
		isPreexisting bool
		opts          map[string]interface{}
	}{fileset, quota, volumeName, filesystem, isPreexisting, opts})
	fake.recordInvocation("InsertFilesetQuotaVolume", []interface{}{fileset, quota, volumeName, filesystem, isPreexisting, opts})
	fake.insertFilesetQuotaVolumeMutex.Unlock()
	if fake.InsertFilesetQuotaVolumeStub != nil {
		return fake.InsertFilesetQuotaVolumeStub(fileset, quota, volumeName, filesystem, isPreexisting, opts)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.insertFilesetQuotaVolumeReturns.result1
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetQuotaVolumeCallCount() int {
	fake.insertFilesetQuotaVolumeMutex.RLock()
	defer fake.insertFilesetQuotaVolumeMutex.RUnlock()
	return len(fake.insertFilesetQuotaVolumeArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetQuotaVolumeArgsForCall(i int) (string, string, string, string, bool, map[string]interface{}) {
	fake.insertFilesetQuotaVolumeMutex.RLock()
	defer fake.insertFilesetQuotaVolumeMutex.RUnlock()
	return fake.insertFilesetQuotaVolumeArgsForCall[i].fileset, fake.insertFilesetQuotaVolumeArgsForCall[i].quota, fake.insertFilesetQuotaVolumeArgsForCall[i].volumeName, fake.insertFilesetQuotaVolumeArgsForCall[i].filesystem, fake.insertFilesetQuotaVolumeArgsForCall[i].isPreexisting, fake.insertFilesetQuotaVolumeArgsForCall[i].opts
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetQuotaVolumeReturns(result1 error) {
	fake.InsertFilesetQuotaVolumeStub = nil
	fake.insertFilesetQuotaVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) InsertFilesetQuotaVolumeReturnsOnCall(i int, result1 error) {
	fake.InsertFilesetQuotaVolumeStub = nil
	if fake.insertFilesetQuotaVolumeReturnsOnCall == nil {
		fake.insertFilesetQuotaVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertFilesetQuotaVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumDataModelWrapper) GetVolume(name string) (spectrumscale.SpectrumScaleVolume, bool, error) {
	fake.getVolumeMutex.Lock()
	ret, specificReturn := fake.getVolumeReturnsOnCall[len(fake.getVolumeArgsForCall)]
	fake.getVolumeArgsForCall = append(fake.getVolumeArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetVolume", []interface{}{name})
	fake.getVolumeMutex.Unlock()
	if fake.GetVolumeStub != nil {
		return fake.GetVolumeStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getVolumeReturns.result1, fake.getVolumeReturns.result2, fake.getVolumeReturns.result3
}

func (fake *FakeSpectrumDataModelWrapper) GetVolumeCallCount() int {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return len(fake.getVolumeArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) GetVolumeArgsForCall(i int) string {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return fake.getVolumeArgsForCall[i].name
}

func (fake *FakeSpectrumDataModelWrapper) GetVolumeReturns(result1 spectrumscale.SpectrumScaleVolume, result2 bool, result3 error) {
	fake.GetVolumeStub = nil
	fake.getVolumeReturns = struct {
		result1 spectrumscale.SpectrumScaleVolume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSpectrumDataModelWrapper) GetVolumeReturnsOnCall(i int, result1 spectrumscale.SpectrumScaleVolume, result2 bool, result3 error) {
	fake.GetVolumeStub = nil
	if fake.getVolumeReturnsOnCall == nil {
		fake.getVolumeReturnsOnCall = make(map[int]struct {
			result1 spectrumscale.SpectrumScaleVolume
			result2 bool
			result3 error
		})
	}
	fake.getVolumeReturnsOnCall[i] = struct {
		result1 spectrumscale.SpectrumScaleVolume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSpectrumDataModelWrapper) ListVolumes() ([]resources.Volume, error) {
	fake.listVolumesMutex.Lock()
	ret, specificReturn := fake.listVolumesReturnsOnCall[len(fake.listVolumesArgsForCall)]
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct{}{})
	fake.recordInvocation("ListVolumes", []interface{}{})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listVolumesReturns.result1, fake.listVolumesReturns.result2
}

func (fake *FakeSpectrumDataModelWrapper) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) ListVolumesReturns(result1 []resources.Volume, result2 error) {
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumDataModelWrapper) ListVolumesReturnsOnCall(i int, result1 []resources.Volume, result2 error) {
	fake.ListVolumesStub = nil
	if fake.listVolumesReturnsOnCall == nil {
		fake.listVolumesReturnsOnCall = make(map[int]struct {
			result1 []resources.Volume
			result2 error
		})
	}
	fake.listVolumesReturnsOnCall[i] = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumDataModelWrapper) UpdateDatabaseVolume(newVolume *spectrumscale.SpectrumScaleVolume) {
    fake.updateDatabaseVolumeMutex.Lock()
    fake.updateDatabaseVolumeArgsForCall = append(fake.updateDatabaseVolumeArgsForCall, struct {
        newVolume *spectrumscale.SpectrumScaleVolume
    }{newVolume})
    fake.recordInvocation("UpdateDatabaseVolume", []interface{}{newVolume})
    fake.updateDatabaseVolumeMutex.Unlock()
    if fake.UpdateDatabaseVolumeStub != nil {
        fake.UpdateDatabaseVolumeStub(newVolume)
    }
}

func (fake *FakeSpectrumDataModelWrapper) UpdateDatabaseVolumeCallCount() int {
    fake.updateDatabaseVolumeMutex.RLock()
    defer fake.updateDatabaseVolumeMutex.RUnlock()
    return len(fake.updateDatabaseVolumeArgsForCall)
}

func (fake *FakeSpectrumDataModelWrapper) UpdateDatabaseVolumeArgsForCall(i int) *spectrumscale.SpectrumScaleVolume {
    fake.updateDatabaseVolumeMutex.RLock()
    defer fake.updateDatabaseVolumeMutex.RUnlock()
    return fake.updateDatabaseVolumeArgsForCall[i].newVolume
}

func (fake *FakeSpectrumDataModelWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.insertFilesetVolumeMutex.RLock()
	defer fake.insertFilesetVolumeMutex.RUnlock()
	fake.insertFilesetQuotaVolumeMutex.RLock()
	defer fake.insertFilesetQuotaVolumeMutex.RUnlock()
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
    fake.updateDatabaseVolumeMutex.RLock()
    defer fake.updateDatabaseVolumeMutex.RUnlock()
    fake.getDbNameMutex.RLock()
    defer fake.getDbNameMutex.RUnlock()
    fake.isDbVolumeMutex.RLock()
    defer fake.isDbVolumeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSpectrumDataModelWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ spectrumscale.SpectrumDataModel = new(FakeSpectrumDataModel)
