// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/remote/mounter/block_device_utils"
	"github.com/IBM/ubiquity/resources"
)

type FakeBlockDeviceUtils struct {
	CheckFsStub        func(string) (bool, error)
	checkFsMutex       sync.RWMutex
	checkFsArgsForCall []struct {
		arg1 string
	}
	checkFsReturns struct {
		result1 bool
		result2 error
	}
	checkFsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CleanupStub        func(string) error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
		arg1 string
	}
	cleanupReturns struct {
		result1 error
	}
	cleanupReturnsOnCall map[int]struct {
		result1 error
	}
	CleanupDevicesStub        func(block_device_utils.Protocol, *resources.VolumeMountProperties) error
	cleanupDevicesMutex       sync.RWMutex
	cleanupDevicesArgsForCall []struct {
		arg1 block_device_utils.Protocol
		arg2 *resources.VolumeMountProperties
	}
	cleanupDevicesReturns struct {
		result1 error
	}
	cleanupDevicesReturnsOnCall map[int]struct {
		result1 error
	}
	DiscoverStub        func(string, bool) (string, error)
	discoverMutex       sync.RWMutex
	discoverArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	discoverReturns struct {
		result1 string
		result2 error
	}
	discoverReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DiscoverBySgInqStub        func(string, string) (string, error)
	discoverBySgInqMutex       sync.RWMutex
	discoverBySgInqArgsForCall []struct {
		arg1 string
		arg2 string
	}
	discoverBySgInqReturns struct {
		result1 string
		result2 error
	}
	discoverBySgInqReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetWwnByScsiInqStub        func(string, string) (string, error)
	getWwnByScsiInqMutex       sync.RWMutex
	getWwnByScsiInqArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getWwnByScsiInqReturns struct {
		result1 string
		result2 error
	}
	getWwnByScsiInqReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IsDeviceMountedStub        func(string) (bool, []string, error)
	isDeviceMountedMutex       sync.RWMutex
	isDeviceMountedArgsForCall []struct {
		arg1 string
	}
	isDeviceMountedReturns struct {
		result1 bool
		result2 []string
		result3 error
	}
	isDeviceMountedReturnsOnCall map[int]struct {
		result1 bool
		result2 []string
		result3 error
	}
	IsDirAMountPointStub        func(string) (bool, []string, error)
	isDirAMountPointMutex       sync.RWMutex
	isDirAMountPointArgsForCall []struct {
		arg1 string
	}
	isDirAMountPointReturns struct {
		result1 bool
		result2 []string
		result3 error
	}
	isDirAMountPointReturnsOnCall map[int]struct {
		result1 bool
		result2 []string
		result3 error
	}
	MakeFsStub        func(string, string) error
	makeFsMutex       sync.RWMutex
	makeFsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	makeFsReturns struct {
		result1 error
	}
	makeFsReturnsOnCall map[int]struct {
		result1 error
	}
	MountFsStub        func(string, string) error
	mountFsMutex       sync.RWMutex
	mountFsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	mountFsReturns struct {
		result1 error
	}
	mountFsReturnsOnCall map[int]struct {
		result1 error
	}
	ReloadMultipathStub        func() error
	reloadMultipathMutex       sync.RWMutex
	reloadMultipathArgsForCall []struct {
	}
	reloadMultipathReturns struct {
		result1 error
	}
	reloadMultipathReturnsOnCall map[int]struct {
		result1 error
	}
	RescanStub        func(block_device_utils.Protocol, *resources.VolumeMountProperties) error
	rescanMutex       sync.RWMutex
	rescanArgsForCall []struct {
		arg1 block_device_utils.Protocol
		arg2 *resources.VolumeMountProperties
	}
	rescanReturns struct {
		result1 error
	}
	rescanReturnsOnCall map[int]struct {
		result1 error
	}
	SetDmsetupStub        func(string) error
	setDmsetupMutex       sync.RWMutex
	setDmsetupArgsForCall []struct {
		arg1 string
	}
	setDmsetupReturns struct {
		result1 error
	}
	setDmsetupReturnsOnCall map[int]struct {
		result1 error
	}
	UmountFsStub        func(string, string) error
	umountFsMutex       sync.RWMutex
	umountFsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	umountFsReturns struct {
		result1 error
	}
	umountFsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockDeviceUtils) CheckFs(arg1 string) (bool, error) {
	fake.checkFsMutex.Lock()
	ret, specificReturn := fake.checkFsReturnsOnCall[len(fake.checkFsArgsForCall)]
	fake.checkFsArgsForCall = append(fake.checkFsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CheckFs", []interface{}{arg1})
	fake.checkFsMutex.Unlock()
	if fake.CheckFsStub != nil {
		return fake.CheckFsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkFsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlockDeviceUtils) CheckFsCallCount() int {
	fake.checkFsMutex.RLock()
	defer fake.checkFsMutex.RUnlock()
	return len(fake.checkFsArgsForCall)
}

func (fake *FakeBlockDeviceUtils) CheckFsCalls(stub func(string) (bool, error)) {
	fake.checkFsMutex.Lock()
	defer fake.checkFsMutex.Unlock()
	fake.CheckFsStub = stub
}

func (fake *FakeBlockDeviceUtils) CheckFsArgsForCall(i int) string {
	fake.checkFsMutex.RLock()
	defer fake.checkFsMutex.RUnlock()
	argsForCall := fake.checkFsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceUtils) CheckFsReturns(result1 bool, result2 error) {
	fake.checkFsMutex.Lock()
	defer fake.checkFsMutex.Unlock()
	fake.CheckFsStub = nil
	fake.checkFsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) CheckFsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkFsMutex.Lock()
	defer fake.checkFsMutex.Unlock()
	fake.CheckFsStub = nil
	if fake.checkFsReturnsOnCall == nil {
		fake.checkFsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkFsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) Cleanup(arg1 string) error {
	fake.cleanupMutex.Lock()
	ret, specificReturn := fake.cleanupReturnsOnCall[len(fake.cleanupArgsForCall)]
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Cleanup", []interface{}{arg1})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cleanupReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeBlockDeviceUtils) CleanupCalls(stub func(string) error) {
	fake.cleanupMutex.Lock()
	defer fake.cleanupMutex.Unlock()
	fake.CleanupStub = stub
}

func (fake *FakeBlockDeviceUtils) CleanupArgsForCall(i int) string {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	argsForCall := fake.cleanupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceUtils) CleanupReturns(result1 error) {
	fake.cleanupMutex.Lock()
	defer fake.cleanupMutex.Unlock()
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) CleanupReturnsOnCall(i int, result1 error) {
	fake.cleanupMutex.Lock()
	defer fake.cleanupMutex.Unlock()
	fake.CleanupStub = nil
	if fake.cleanupReturnsOnCall == nil {
		fake.cleanupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) CleanupDevices(arg1 block_device_utils.Protocol, arg2 *resources.VolumeMountProperties) error {
	fake.cleanupDevicesMutex.Lock()
	ret, specificReturn := fake.cleanupDevicesReturnsOnCall[len(fake.cleanupDevicesArgsForCall)]
	fake.cleanupDevicesArgsForCall = append(fake.cleanupDevicesArgsForCall, struct {
		arg1 block_device_utils.Protocol
		arg2 *resources.VolumeMountProperties
	}{arg1, arg2})
	fake.recordInvocation("CleanupDevices", []interface{}{arg1, arg2})
	fake.cleanupDevicesMutex.Unlock()
	if fake.CleanupDevicesStub != nil {
		return fake.CleanupDevicesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cleanupDevicesReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) CleanupDevicesCallCount() int {
	fake.cleanupDevicesMutex.RLock()
	defer fake.cleanupDevicesMutex.RUnlock()
	return len(fake.cleanupDevicesArgsForCall)
}

func (fake *FakeBlockDeviceUtils) CleanupDevicesCalls(stub func(block_device_utils.Protocol, *resources.VolumeMountProperties) error) {
	fake.cleanupDevicesMutex.Lock()
	defer fake.cleanupDevicesMutex.Unlock()
	fake.CleanupDevicesStub = stub
}

func (fake *FakeBlockDeviceUtils) CleanupDevicesArgsForCall(i int) (block_device_utils.Protocol, *resources.VolumeMountProperties) {
	fake.cleanupDevicesMutex.RLock()
	defer fake.cleanupDevicesMutex.RUnlock()
	argsForCall := fake.cleanupDevicesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) CleanupDevicesReturns(result1 error) {
	fake.cleanupDevicesMutex.Lock()
	defer fake.cleanupDevicesMutex.Unlock()
	fake.CleanupDevicesStub = nil
	fake.cleanupDevicesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) CleanupDevicesReturnsOnCall(i int, result1 error) {
	fake.cleanupDevicesMutex.Lock()
	defer fake.cleanupDevicesMutex.Unlock()
	fake.CleanupDevicesStub = nil
	if fake.cleanupDevicesReturnsOnCall == nil {
		fake.cleanupDevicesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupDevicesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) Discover(arg1 string, arg2 bool) (string, error) {
	fake.discoverMutex.Lock()
	ret, specificReturn := fake.discoverReturnsOnCall[len(fake.discoverArgsForCall)]
	fake.discoverArgsForCall = append(fake.discoverArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("Discover", []interface{}{arg1, arg2})
	fake.discoverMutex.Unlock()
	if fake.DiscoverStub != nil {
		return fake.DiscoverStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.discoverReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlockDeviceUtils) DiscoverCallCount() int {
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	return len(fake.discoverArgsForCall)
}

func (fake *FakeBlockDeviceUtils) DiscoverCalls(stub func(string, bool) (string, error)) {
	fake.discoverMutex.Lock()
	defer fake.discoverMutex.Unlock()
	fake.DiscoverStub = stub
}

func (fake *FakeBlockDeviceUtils) DiscoverArgsForCall(i int) (string, bool) {
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	argsForCall := fake.discoverArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) DiscoverReturns(result1 string, result2 error) {
	fake.discoverMutex.Lock()
	defer fake.discoverMutex.Unlock()
	fake.DiscoverStub = nil
	fake.discoverReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) DiscoverReturnsOnCall(i int, result1 string, result2 error) {
	fake.discoverMutex.Lock()
	defer fake.discoverMutex.Unlock()
	fake.DiscoverStub = nil
	if fake.discoverReturnsOnCall == nil {
		fake.discoverReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.discoverReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) DiscoverBySgInq(arg1 string, arg2 string) (string, error) {
	fake.discoverBySgInqMutex.Lock()
	ret, specificReturn := fake.discoverBySgInqReturnsOnCall[len(fake.discoverBySgInqArgsForCall)]
	fake.discoverBySgInqArgsForCall = append(fake.discoverBySgInqArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DiscoverBySgInq", []interface{}{arg1, arg2})
	fake.discoverBySgInqMutex.Unlock()
	if fake.DiscoverBySgInqStub != nil {
		return fake.DiscoverBySgInqStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.discoverBySgInqReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlockDeviceUtils) DiscoverBySgInqCallCount() int {
	fake.discoverBySgInqMutex.RLock()
	defer fake.discoverBySgInqMutex.RUnlock()
	return len(fake.discoverBySgInqArgsForCall)
}

func (fake *FakeBlockDeviceUtils) DiscoverBySgInqCalls(stub func(string, string) (string, error)) {
	fake.discoverBySgInqMutex.Lock()
	defer fake.discoverBySgInqMutex.Unlock()
	fake.DiscoverBySgInqStub = stub
}

func (fake *FakeBlockDeviceUtils) DiscoverBySgInqArgsForCall(i int) (string, string) {
	fake.discoverBySgInqMutex.RLock()
	defer fake.discoverBySgInqMutex.RUnlock()
	argsForCall := fake.discoverBySgInqArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) DiscoverBySgInqReturns(result1 string, result2 error) {
	fake.discoverBySgInqMutex.Lock()
	defer fake.discoverBySgInqMutex.Unlock()
	fake.DiscoverBySgInqStub = nil
	fake.discoverBySgInqReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) DiscoverBySgInqReturnsOnCall(i int, result1 string, result2 error) {
	fake.discoverBySgInqMutex.Lock()
	defer fake.discoverBySgInqMutex.Unlock()
	fake.DiscoverBySgInqStub = nil
	if fake.discoverBySgInqReturnsOnCall == nil {
		fake.discoverBySgInqReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.discoverBySgInqReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) GetWwnByScsiInq(arg1 string, arg2 string) (string, error) {
	fake.getWwnByScsiInqMutex.Lock()
	ret, specificReturn := fake.getWwnByScsiInqReturnsOnCall[len(fake.getWwnByScsiInqArgsForCall)]
	fake.getWwnByScsiInqArgsForCall = append(fake.getWwnByScsiInqArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetWwnByScsiInq", []interface{}{arg1, arg2})
	fake.getWwnByScsiInqMutex.Unlock()
	if fake.GetWwnByScsiInqStub != nil {
		return fake.GetWwnByScsiInqStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getWwnByScsiInqReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlockDeviceUtils) GetWwnByScsiInqCallCount() int {
	fake.getWwnByScsiInqMutex.RLock()
	defer fake.getWwnByScsiInqMutex.RUnlock()
	return len(fake.getWwnByScsiInqArgsForCall)
}

func (fake *FakeBlockDeviceUtils) GetWwnByScsiInqCalls(stub func(string, string) (string, error)) {
	fake.getWwnByScsiInqMutex.Lock()
	defer fake.getWwnByScsiInqMutex.Unlock()
	fake.GetWwnByScsiInqStub = stub
}

func (fake *FakeBlockDeviceUtils) GetWwnByScsiInqArgsForCall(i int) (string, string) {
	fake.getWwnByScsiInqMutex.RLock()
	defer fake.getWwnByScsiInqMutex.RUnlock()
	argsForCall := fake.getWwnByScsiInqArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) GetWwnByScsiInqReturns(result1 string, result2 error) {
	fake.getWwnByScsiInqMutex.Lock()
	defer fake.getWwnByScsiInqMutex.Unlock()
	fake.GetWwnByScsiInqStub = nil
	fake.getWwnByScsiInqReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) GetWwnByScsiInqReturnsOnCall(i int, result1 string, result2 error) {
	fake.getWwnByScsiInqMutex.Lock()
	defer fake.getWwnByScsiInqMutex.Unlock()
	fake.GetWwnByScsiInqStub = nil
	if fake.getWwnByScsiInqReturnsOnCall == nil {
		fake.getWwnByScsiInqReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getWwnByScsiInqReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceUtils) IsDeviceMounted(arg1 string) (bool, []string, error) {
	fake.isDeviceMountedMutex.Lock()
	ret, specificReturn := fake.isDeviceMountedReturnsOnCall[len(fake.isDeviceMountedArgsForCall)]
	fake.isDeviceMountedArgsForCall = append(fake.isDeviceMountedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsDeviceMounted", []interface{}{arg1})
	fake.isDeviceMountedMutex.Unlock()
	if fake.IsDeviceMountedStub != nil {
		return fake.IsDeviceMountedStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.isDeviceMountedReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBlockDeviceUtils) IsDeviceMountedCallCount() int {
	fake.isDeviceMountedMutex.RLock()
	defer fake.isDeviceMountedMutex.RUnlock()
	return len(fake.isDeviceMountedArgsForCall)
}

func (fake *FakeBlockDeviceUtils) IsDeviceMountedCalls(stub func(string) (bool, []string, error)) {
	fake.isDeviceMountedMutex.Lock()
	defer fake.isDeviceMountedMutex.Unlock()
	fake.IsDeviceMountedStub = stub
}

func (fake *FakeBlockDeviceUtils) IsDeviceMountedArgsForCall(i int) string {
	fake.isDeviceMountedMutex.RLock()
	defer fake.isDeviceMountedMutex.RUnlock()
	argsForCall := fake.isDeviceMountedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceUtils) IsDeviceMountedReturns(result1 bool, result2 []string, result3 error) {
	fake.isDeviceMountedMutex.Lock()
	defer fake.isDeviceMountedMutex.Unlock()
	fake.IsDeviceMountedStub = nil
	fake.isDeviceMountedReturns = struct {
		result1 bool
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlockDeviceUtils) IsDeviceMountedReturnsOnCall(i int, result1 bool, result2 []string, result3 error) {
	fake.isDeviceMountedMutex.Lock()
	defer fake.isDeviceMountedMutex.Unlock()
	fake.IsDeviceMountedStub = nil
	if fake.isDeviceMountedReturnsOnCall == nil {
		fake.isDeviceMountedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 []string
			result3 error
		})
	}
	fake.isDeviceMountedReturnsOnCall[i] = struct {
		result1 bool
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlockDeviceUtils) IsDirAMountPoint(arg1 string) (bool, []string, error) {
	fake.isDirAMountPointMutex.Lock()
	ret, specificReturn := fake.isDirAMountPointReturnsOnCall[len(fake.isDirAMountPointArgsForCall)]
	fake.isDirAMountPointArgsForCall = append(fake.isDirAMountPointArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsDirAMountPoint", []interface{}{arg1})
	fake.isDirAMountPointMutex.Unlock()
	if fake.IsDirAMountPointStub != nil {
		return fake.IsDirAMountPointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.isDirAMountPointReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBlockDeviceUtils) IsDirAMountPointCallCount() int {
	fake.isDirAMountPointMutex.RLock()
	defer fake.isDirAMountPointMutex.RUnlock()
	return len(fake.isDirAMountPointArgsForCall)
}

func (fake *FakeBlockDeviceUtils) IsDirAMountPointCalls(stub func(string) (bool, []string, error)) {
	fake.isDirAMountPointMutex.Lock()
	defer fake.isDirAMountPointMutex.Unlock()
	fake.IsDirAMountPointStub = stub
}

func (fake *FakeBlockDeviceUtils) IsDirAMountPointArgsForCall(i int) string {
	fake.isDirAMountPointMutex.RLock()
	defer fake.isDirAMountPointMutex.RUnlock()
	argsForCall := fake.isDirAMountPointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceUtils) IsDirAMountPointReturns(result1 bool, result2 []string, result3 error) {
	fake.isDirAMountPointMutex.Lock()
	defer fake.isDirAMountPointMutex.Unlock()
	fake.IsDirAMountPointStub = nil
	fake.isDirAMountPointReturns = struct {
		result1 bool
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlockDeviceUtils) IsDirAMountPointReturnsOnCall(i int, result1 bool, result2 []string, result3 error) {
	fake.isDirAMountPointMutex.Lock()
	defer fake.isDirAMountPointMutex.Unlock()
	fake.IsDirAMountPointStub = nil
	if fake.isDirAMountPointReturnsOnCall == nil {
		fake.isDirAMountPointReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 []string
			result3 error
		})
	}
	fake.isDirAMountPointReturnsOnCall[i] = struct {
		result1 bool
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlockDeviceUtils) MakeFs(arg1 string, arg2 string) error {
	fake.makeFsMutex.Lock()
	ret, specificReturn := fake.makeFsReturnsOnCall[len(fake.makeFsArgsForCall)]
	fake.makeFsArgsForCall = append(fake.makeFsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("MakeFs", []interface{}{arg1, arg2})
	fake.makeFsMutex.Unlock()
	if fake.MakeFsStub != nil {
		return fake.MakeFsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.makeFsReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) MakeFsCallCount() int {
	fake.makeFsMutex.RLock()
	defer fake.makeFsMutex.RUnlock()
	return len(fake.makeFsArgsForCall)
}

func (fake *FakeBlockDeviceUtils) MakeFsCalls(stub func(string, string) error) {
	fake.makeFsMutex.Lock()
	defer fake.makeFsMutex.Unlock()
	fake.MakeFsStub = stub
}

func (fake *FakeBlockDeviceUtils) MakeFsArgsForCall(i int) (string, string) {
	fake.makeFsMutex.RLock()
	defer fake.makeFsMutex.RUnlock()
	argsForCall := fake.makeFsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) MakeFsReturns(result1 error) {
	fake.makeFsMutex.Lock()
	defer fake.makeFsMutex.Unlock()
	fake.MakeFsStub = nil
	fake.makeFsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) MakeFsReturnsOnCall(i int, result1 error) {
	fake.makeFsMutex.Lock()
	defer fake.makeFsMutex.Unlock()
	fake.MakeFsStub = nil
	if fake.makeFsReturnsOnCall == nil {
		fake.makeFsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeFsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) MountFs(arg1 string, arg2 string) error {
	fake.mountFsMutex.Lock()
	ret, specificReturn := fake.mountFsReturnsOnCall[len(fake.mountFsArgsForCall)]
	fake.mountFsArgsForCall = append(fake.mountFsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("MountFs", []interface{}{arg1, arg2})
	fake.mountFsMutex.Unlock()
	if fake.MountFsStub != nil {
		return fake.MountFsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.mountFsReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) MountFsCallCount() int {
	fake.mountFsMutex.RLock()
	defer fake.mountFsMutex.RUnlock()
	return len(fake.mountFsArgsForCall)
}

func (fake *FakeBlockDeviceUtils) MountFsCalls(stub func(string, string) error) {
	fake.mountFsMutex.Lock()
	defer fake.mountFsMutex.Unlock()
	fake.MountFsStub = stub
}

func (fake *FakeBlockDeviceUtils) MountFsArgsForCall(i int) (string, string) {
	fake.mountFsMutex.RLock()
	defer fake.mountFsMutex.RUnlock()
	argsForCall := fake.mountFsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) MountFsReturns(result1 error) {
	fake.mountFsMutex.Lock()
	defer fake.mountFsMutex.Unlock()
	fake.MountFsStub = nil
	fake.mountFsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) MountFsReturnsOnCall(i int, result1 error) {
	fake.mountFsMutex.Lock()
	defer fake.mountFsMutex.Unlock()
	fake.MountFsStub = nil
	if fake.mountFsReturnsOnCall == nil {
		fake.mountFsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mountFsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) ReloadMultipath() error {
	fake.reloadMultipathMutex.Lock()
	ret, specificReturn := fake.reloadMultipathReturnsOnCall[len(fake.reloadMultipathArgsForCall)]
	fake.reloadMultipathArgsForCall = append(fake.reloadMultipathArgsForCall, struct {
	}{})
	fake.recordInvocation("ReloadMultipath", []interface{}{})
	fake.reloadMultipathMutex.Unlock()
	if fake.ReloadMultipathStub != nil {
		return fake.ReloadMultipathStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reloadMultipathReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) ReloadMultipathCallCount() int {
	fake.reloadMultipathMutex.RLock()
	defer fake.reloadMultipathMutex.RUnlock()
	return len(fake.reloadMultipathArgsForCall)
}

func (fake *FakeBlockDeviceUtils) ReloadMultipathCalls(stub func() error) {
	fake.reloadMultipathMutex.Lock()
	defer fake.reloadMultipathMutex.Unlock()
	fake.ReloadMultipathStub = stub
}

func (fake *FakeBlockDeviceUtils) ReloadMultipathReturns(result1 error) {
	fake.reloadMultipathMutex.Lock()
	defer fake.reloadMultipathMutex.Unlock()
	fake.ReloadMultipathStub = nil
	fake.reloadMultipathReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) ReloadMultipathReturnsOnCall(i int, result1 error) {
	fake.reloadMultipathMutex.Lock()
	defer fake.reloadMultipathMutex.Unlock()
	fake.ReloadMultipathStub = nil
	if fake.reloadMultipathReturnsOnCall == nil {
		fake.reloadMultipathReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reloadMultipathReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) Rescan(arg1 block_device_utils.Protocol, arg2 *resources.VolumeMountProperties) error {
	fake.rescanMutex.Lock()
	ret, specificReturn := fake.rescanReturnsOnCall[len(fake.rescanArgsForCall)]
	fake.rescanArgsForCall = append(fake.rescanArgsForCall, struct {
		arg1 block_device_utils.Protocol
		arg2 *resources.VolumeMountProperties
	}{arg1, arg2})
	fake.recordInvocation("Rescan", []interface{}{arg1, arg2})
	fake.rescanMutex.Unlock()
	if fake.RescanStub != nil {
		return fake.RescanStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.rescanReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) RescanCallCount() int {
	fake.rescanMutex.RLock()
	defer fake.rescanMutex.RUnlock()
	return len(fake.rescanArgsForCall)
}

func (fake *FakeBlockDeviceUtils) RescanCalls(stub func(block_device_utils.Protocol, *resources.VolumeMountProperties) error) {
	fake.rescanMutex.Lock()
	defer fake.rescanMutex.Unlock()
	fake.RescanStub = stub
}

func (fake *FakeBlockDeviceUtils) RescanArgsForCall(i int) (block_device_utils.Protocol, *resources.VolumeMountProperties) {
	fake.rescanMutex.RLock()
	defer fake.rescanMutex.RUnlock()
	argsForCall := fake.rescanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) RescanReturns(result1 error) {
	fake.rescanMutex.Lock()
	defer fake.rescanMutex.Unlock()
	fake.RescanStub = nil
	fake.rescanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) RescanReturnsOnCall(i int, result1 error) {
	fake.rescanMutex.Lock()
	defer fake.rescanMutex.Unlock()
	fake.RescanStub = nil
	if fake.rescanReturnsOnCall == nil {
		fake.rescanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rescanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) SetDmsetup(arg1 string) error {
	fake.setDmsetupMutex.Lock()
	ret, specificReturn := fake.setDmsetupReturnsOnCall[len(fake.setDmsetupArgsForCall)]
	fake.setDmsetupArgsForCall = append(fake.setDmsetupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SetDmsetup", []interface{}{arg1})
	fake.setDmsetupMutex.Unlock()
	if fake.SetDmsetupStub != nil {
		return fake.SetDmsetupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setDmsetupReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) SetDmsetupCallCount() int {
	fake.setDmsetupMutex.RLock()
	defer fake.setDmsetupMutex.RUnlock()
	return len(fake.setDmsetupArgsForCall)
}

func (fake *FakeBlockDeviceUtils) SetDmsetupCalls(stub func(string) error) {
	fake.setDmsetupMutex.Lock()
	defer fake.setDmsetupMutex.Unlock()
	fake.SetDmsetupStub = stub
}

func (fake *FakeBlockDeviceUtils) SetDmsetupArgsForCall(i int) string {
	fake.setDmsetupMutex.RLock()
	defer fake.setDmsetupMutex.RUnlock()
	argsForCall := fake.setDmsetupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceUtils) SetDmsetupReturns(result1 error) {
	fake.setDmsetupMutex.Lock()
	defer fake.setDmsetupMutex.Unlock()
	fake.SetDmsetupStub = nil
	fake.setDmsetupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) SetDmsetupReturnsOnCall(i int, result1 error) {
	fake.setDmsetupMutex.Lock()
	defer fake.setDmsetupMutex.Unlock()
	fake.SetDmsetupStub = nil
	if fake.setDmsetupReturnsOnCall == nil {
		fake.setDmsetupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setDmsetupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) UmountFs(arg1 string, arg2 string) error {
	fake.umountFsMutex.Lock()
	ret, specificReturn := fake.umountFsReturnsOnCall[len(fake.umountFsArgsForCall)]
	fake.umountFsArgsForCall = append(fake.umountFsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UmountFs", []interface{}{arg1, arg2})
	fake.umountFsMutex.Unlock()
	if fake.UmountFsStub != nil {
		return fake.UmountFsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.umountFsReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceUtils) UmountFsCallCount() int {
	fake.umountFsMutex.RLock()
	defer fake.umountFsMutex.RUnlock()
	return len(fake.umountFsArgsForCall)
}

func (fake *FakeBlockDeviceUtils) UmountFsCalls(stub func(string, string) error) {
	fake.umountFsMutex.Lock()
	defer fake.umountFsMutex.Unlock()
	fake.UmountFsStub = stub
}

func (fake *FakeBlockDeviceUtils) UmountFsArgsForCall(i int) (string, string) {
	fake.umountFsMutex.RLock()
	defer fake.umountFsMutex.RUnlock()
	argsForCall := fake.umountFsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceUtils) UmountFsReturns(result1 error) {
	fake.umountFsMutex.Lock()
	defer fake.umountFsMutex.Unlock()
	fake.UmountFsStub = nil
	fake.umountFsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) UmountFsReturnsOnCall(i int, result1 error) {
	fake.umountFsMutex.Lock()
	defer fake.umountFsMutex.Unlock()
	fake.UmountFsStub = nil
	if fake.umountFsReturnsOnCall == nil {
		fake.umountFsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.umountFsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceUtils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkFsMutex.RLock()
	defer fake.checkFsMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.cleanupDevicesMutex.RLock()
	defer fake.cleanupDevicesMutex.RUnlock()
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	fake.discoverBySgInqMutex.RLock()
	defer fake.discoverBySgInqMutex.RUnlock()
	fake.getWwnByScsiInqMutex.RLock()
	defer fake.getWwnByScsiInqMutex.RUnlock()
	fake.isDeviceMountedMutex.RLock()
	defer fake.isDeviceMountedMutex.RUnlock()
	fake.isDirAMountPointMutex.RLock()
	defer fake.isDirAMountPointMutex.RUnlock()
	fake.makeFsMutex.RLock()
	defer fake.makeFsMutex.RUnlock()
	fake.mountFsMutex.RLock()
	defer fake.mountFsMutex.RUnlock()
	fake.reloadMultipathMutex.RLock()
	defer fake.reloadMultipathMutex.RUnlock()
	fake.rescanMutex.RLock()
	defer fake.rescanMutex.RUnlock()
	fake.setDmsetupMutex.RLock()
	defer fake.setDmsetupMutex.RUnlock()
	fake.umountFsMutex.RLock()
	defer fake.umountFsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockDeviceUtils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ block_device_utils.BlockDeviceUtils = new(FakeBlockDeviceUtils)
