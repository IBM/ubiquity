// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/IBM/ubiquity/remote/mounter"
	"github.com/IBM/ubiquity/resources"
)

type FakeMounterFactory struct {
	GetMounterPerBackendStub        func(backend string, legacyLogger *log.Logger, pluginConfig resources.UbiquityPluginConfig) (resources.Mounter, error)
	getMounterPerBackendMutex       sync.RWMutex
	getMounterPerBackendArgsForCall []struct {
		backend      string
		legacyLogger *log.Logger
		pluginConfig resources.UbiquityPluginConfig
	}
	getMounterPerBackendReturns struct {
		result1 resources.Mounter
		result2 error
	}
	getMounterPerBackendReturnsOnCall map[int]struct {
		result1 resources.Mounter
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMounterFactory) GetMounterPerBackend(backend string, legacyLogger *log.Logger, pluginConfig resources.UbiquityPluginConfig) (resources.Mounter, error) {
	fake.getMounterPerBackendMutex.Lock()
	ret, specificReturn := fake.getMounterPerBackendReturnsOnCall[len(fake.getMounterPerBackendArgsForCall)]
	fake.getMounterPerBackendArgsForCall = append(fake.getMounterPerBackendArgsForCall, struct {
		backend      string
		legacyLogger *log.Logger
		pluginConfig resources.UbiquityPluginConfig
	}{backend, legacyLogger, pluginConfig})
	fake.recordInvocation("GetMounterPerBackend", []interface{}{backend, legacyLogger, pluginConfig})
	fake.getMounterPerBackendMutex.Unlock()
	if fake.GetMounterPerBackendStub != nil {
		return fake.GetMounterPerBackendStub(backend, legacyLogger, pluginConfig)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getMounterPerBackendReturns.result1, fake.getMounterPerBackendReturns.result2
}

func (fake *FakeMounterFactory) GetMounterPerBackendCallCount() int {
	fake.getMounterPerBackendMutex.RLock()
	defer fake.getMounterPerBackendMutex.RUnlock()
	return len(fake.getMounterPerBackendArgsForCall)
}

func (fake *FakeMounterFactory) GetMounterPerBackendArgsForCall(i int) (string, *log.Logger, resources.UbiquityPluginConfig) {
	fake.getMounterPerBackendMutex.RLock()
	defer fake.getMounterPerBackendMutex.RUnlock()
	return fake.getMounterPerBackendArgsForCall[i].backend, fake.getMounterPerBackendArgsForCall[i].legacyLogger, fake.getMounterPerBackendArgsForCall[i].pluginConfig
}

func (fake *FakeMounterFactory) GetMounterPerBackendReturns(result1 resources.Mounter, result2 error) {
	fake.GetMounterPerBackendStub = nil
	fake.getMounterPerBackendReturns = struct {
		result1 resources.Mounter
		result2 error
	}{result1, result2}
}

func (fake *FakeMounterFactory) GetMounterPerBackendReturnsOnCall(i int, result1 resources.Mounter, result2 error) {
	fake.GetMounterPerBackendStub = nil
	if fake.getMounterPerBackendReturnsOnCall == nil {
		fake.getMounterPerBackendReturnsOnCall = make(map[int]struct {
			result1 resources.Mounter
			result2 error
		})
	}
	fake.getMounterPerBackendReturnsOnCall[i] = struct {
		result1 resources.Mounter
		result2 error
	}{result1, result2}
}

func (fake *FakeMounterFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMounterPerBackendMutex.RLock()
	defer fake.getMounterPerBackendMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMounterFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mounter.MounterFactory = new(FakeMounterFactory)
